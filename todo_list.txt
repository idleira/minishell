TODO:

1. Limited amount of global variables is allowed. Put all the structs in one struct and prepare to explain the use of more variables if used.
2. Handle empty command, empty spaces and tabs chose_execution
3. Test different cases of echo with different arguments, different variations of "" ' ""
4. Implement "echo $?". Should work with correct cmds and incorrect cmd. Gather all of the possible exit codes in bash and change all of them accordingly.
	4.1 Handle $? + $?
5. Signals:
	ctrl-C in an empty prompt should display a new line with a new prompt.
	ctrl-\ in an empty prompt should not do anything.
	ctrl-D in an empty prompt should quit minishell --> RELAUNCH!
	ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt.
	The buffer should be clean too. Press "Enter" to make sure nothing from the previous line is executed.
	ctrl-D in a prompt after you wrote some stuff should not do anything.
	ctrl-\ in a prompt after you wrote some stuff should not do anything.
	Try ctrl-C after running a blocking command like cat without arguments or grep “something“.
	Try ctrl-\ after running a blocking command like cat without arguments or grep “something“.
	Try ctrl-D after running a blocking command like cat without arguments or grep “something“.
7. Implement heredoc
9. echo "$USER"$USER$USER
10. echo "'"'"'"'"
14. add shllvl??
15, PS1=??????????????? {bash profile}

MORE THINGS TO TEST
13. Check if commands are working with all different possible paths.
14. Test redirections. All possible variations < and/or > and >> and <<
15. Test with different pipes and redirections
16. Test history and arrow keys.
	16.1 Type a command line, then use ctrl-C and press "Enter". The buffer should be clean and there should be nothing left to execute.
17. cat | cat | ls | ls
18. Fix "unset"

<3 WE CAN DO IT <3

