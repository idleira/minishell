TODO:

1. Limited amount of global variables is allowed. Put all the structs in one struct and prepare to explain the use of more variables if used.
3. Test different cases of echo with different arguments, different variations of "" ' ""
4. Implement "echo $?". Should work with correct cmds and incorrect cmd. Gather all of the possible exit codes in bash and change all of them accordingly.
	4.1 Handle $? + $?
5. Signals:
	ctrl-C in an empty prompt should display a new line with a new prompt.
	ctrl-\ in an empty prompt should not do anything.
	ctrl-D in an empty prompt should quit minishell --> RELAUNCH!
	ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt.
	The buffer should be clean too. Press "Enter" to make sure nothing from the previous line is executed.
	ctrl-D in a prompt after you wrote some stuff should not do anything.
	ctrl-\ in a prompt after you wrote some stuff should not do anything.
	Try ctrl-C after running a blocking command like cat without arguments or grep “something“.
	Try ctrl-\ after running a blocking command like cat without arguments or grep “something“.
	Try ctrl-D after running a blocking command like cat without arguments or grep “something“.
9. echo "$USER"$USER$USER
10. echo "'"'"'"'"
11.after cat -> ctrl +c doesn't work (prompt built again)
12.last env var in env should be the last executed cmd (always env) (optional?)
13. Fix "unset"
14. implement heredoc
16. export shouldn't sort env
17. echo -nn1 hi (shouldnt see incorrect arg as a flag) - Marianna will fix in echo function
18. exit 100 (implement exit with args)
19. echo $?
20. ls -la | < file1 cat > file3


<3 WE CAN DO IT <3



