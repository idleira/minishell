lexer:

• define different token types (cmds, args, operators, pipes, quotes);
• write a tokenize function to input commands into a sequence of tokens based on the defined types;
• handle whitespace characters to separate tokens;
• implement logic to handle single and double quotes, escaping characters, and special characters (like $);

parser:

• design grammar for the shell specifying the order of cmds, args, redirections, pipes, etc.;
• implement parsing of token sequences into a syntax tree according to the grammar;
• write functions to handle different types of commands (e.g., simple commands, commands with arguments, commands with redirections);
• handle parsing of redirections (<, >, >>) and pipes (|) appropriately, updating the syntax tree accordingly;
• implement logic to expand environment variables ($ followed by a sequence of characters) to their values during parsing;
• ensure correct handling of exit status expansion ($?) and built-in commands.


resources:
- https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
- https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
